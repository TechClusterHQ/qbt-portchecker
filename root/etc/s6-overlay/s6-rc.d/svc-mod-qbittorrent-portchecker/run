#!/usr/bin/with-contenv bash

log() {
    local message="$1"
    local timestamp=$(date +"%Y.%m.%dT%H:%M:%S")
    echo "${timestamp} (qbt-portchecker) ${message}"
}

GLUETUN_API_KEY=${PORTCHECKER_GLUETUN_API_KEY}
GLUETUN_PORT=${PORTCHECKER_GLUETUN_CONTROL_SERVER_PORT:-8000}
SLEEP_COMPLETE=${PORTCHECKER_SLEEP:-120}
KILL_ON_NOT_CONNECTABLE=${PORTCHECKER_KILL_ON_NOT_CONNECTABLE:-true}
FIREWALL_VPN_INPUT_PORTS=${FIREWALL_VPN_INPUT_PORTS} # permanently set this port as the forwarded port
HTTPS=${PORTCHECKER_HTTPS:-false}
PORTCHECK_SERVER_URL="${PORTCHECKER_SERVER:-https://portchecker.onrender.com}"

VAR_UP=true

SCHEME="http"
WGET_OPTIONS="--server-response --spider -T 5 -t 1"
CURL_OPTIONS="--silent"

if [[ "$HTTPS" == "true" ]]; then
    SCHEME="https"
    WGET_OPTIONS="$WGET_OPTIONS --no-check-certificate"
    CURL_OPTIONS="$CURL_OPTIONS --insecure"
fi

log "Waiting for WebUI to become available at ${SCHEME}://localhost:${WEBUI_PORT}"
while :; do

    HTTP_STATUS=$(wget $WGET_OPTIONS "${SCHEME}://localhost:${WEBUI_PORT}" 2>&1 | awk '/HTTP\// {print $2}')

    if [[ "200" == "$HTTP_STATUS" ]]; then
        log "WebUI online at ${SCHEME}://localhost:${WEBUI_PORT}"
        break
    fi

    sleep 1

done

while :; do

    SLEEP=$SLEEP_COMPLETE

    if [ -n "$FIREWALL_VPN_INPUT_PORTS" ]; then
        NEW_PORT="$FIREWALL_VPN_INPUT_PORTS"
    else
        NEW_PORT=$(wget --header="X-API-Key: ${GLUETUN_API_KEY}" -T 5 -t 1 -qO- "http://localhost:${GLUETUN_PORT}/v1/openvpn/portforwarded" | jq ".port")
    
        if [[ "$NEW_PORT" -eq 0 ]]; then
            log "received port 0, ignoring and retrying after $SLEEP seconds"
            sleep $SLEEP
            continue
        fi
    
        PORT=$(wget -T 5 -t 1 -qO- ${HTTPS:+--no-check-certificate} "${SCHEME}://localhost:${WEBUI_PORT}/api/v2/app/preferences" | jq ".listen_port")
    
        if [[ "" == "$NEW_PORT" ]]; then
            log "no port in file or file not found"
        elif [[ "" == "$PORT" ]]; then
            log "api did not respond"
        elif [[ "$PORT" == "$NEW_PORT" ]]; then
            [[ true == "$VAR_UP" ]] && log "port did not change (port: $PORT)"
        else
            log "detected port changed: old: $PORT, new: $NEW_PORT"
            curl $CURL_OPTIONS --request POST --url "${SCHEME}://localhost:${WEBUI_PORT}/api/v2/app/setPreferences" --data "json={\"listen_port\": $NEW_PORT}"
    
            if [[ $? -eq 0 ]]; then
                log "port updated to $NEW_PORT successfully"
                PORT=$NEW_PORT
            else
                log "error updating port"
            fi
        fi
    fi

    CONNECTABLE=$(wget -T 5 -t 1 -qO- "${PORTCHECK_SERVER_URL}/${NEW_PORT}" 2> /dev/null)

    if [[ -z "$CONNECTABLE" ]]; then
        log "portcheck returned no response, skipping"
    elif [[ "$CONNECTABLE" -eq 1 ]]; then
        [[ true == "$VAR_UP" ]] && log "Port $NEW_PORT is connectable, done"
        VAR_UP=false
    elif [[ "$CONNECTABLE" -eq 0 ]]; then
        log "Port $NEW_PORT is not connectable, retrying in $SLEEP seconds"
        if [[ "$KILL_ON_NOT_CONNECTABLE" == true ]]; then
            log "killing qBittorrent..."
            pkill qbittorrent-nox
        fi
    else
        log "unexpected response from port check: $CONNECTABLE"
    fi


    [[ true == "$VAR_UP" ]] && log "sleeping for $SLEEP seconds, retrying afterwards"
    sleep $SLEEP

done
